curriculum controller: this controller is in charge of editing the curriculum
    -you can think of it as the master tool for creating globalgraph, graph,
    theory, and problem; so that they remain linked
        -teacher convienence feature, saves time of editing graphs and
        maintaining graphs

    -new = new theory, problem, globalgraph, graph
    -update = edit a content file or a curriculum progression logic file

seen_hints:
    -some attributes are not foreign keys (like user_id) because I want the
    tuple to persist if those links are severed
        -in the user_id case, I want to still be able to get "average hints
        asked for" for a problem even if a user deletes his account
            -the counter arguement is never let a user delete his account and
            treat the foreign key as error-checking data integrity but meh

6 things:
    -stuff above
    -rails code organization conventions AS A THING
        -talk about RESTful application
        -talk about resources
            -user, problem, etc
        -talk about mvc
            -skinny views (exactly what is needed for displaying data and
                providing interfaces MINUS what can be done in heleprs)
            -helpers refactor for views, controllers, and sometimes both
            -skinny controllers (only processes user actions/params, checks
                access, and sets instance vars and renders view)
            -models prepare instance vars and do anything possible in the
                background (models hold the code for doing almost everything
                EXCEPT exactly the things cont/view responsible for)
                -models also do any queries that return relations
            -views provide interfaces to controller#action THROUGH routes
        -exemptions to convention
            -marker
            -score? probably not; it just isn't a resource
    -talk about how uncontrolled user scaling influences performance
        -needing AJAX for cumulative scores is a good talking point
