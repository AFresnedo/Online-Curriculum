data validations:
    -not only input (is answer missing?)
    -remember that bug with "nil" category saves in unlocked_theory because the
    setter wasn't being called by marker model? that stuff too
    -integration tests are tightly connected with this, start making those at
    the same time

deployment
    -Dreamhost
        -Passenger

basic User resource
    -RESTful Users controller actions
        -deny access for unintended user actions
    -student, admin, teacher, owner (parent)
        -in increasing order of likelihood to be removed
        -admin is 0
        -student is 1
        -teacher is 2
        -owner (parent) is 3
    -model
        -validity

QoL account functionality
    -email validation registration
    -account recovery

security
    -user input is paramatarized (whitelist, blacklist)
        -when using ==, is it always safe?
    -check incomplete_security_checklist.txt in Dropbox
    -automatically log out people after a (time_period)?
        -resets remember_tokens

DBs in general:
    -foreign keys
    -missing indicies (based off controller actions)
    -remove timestamps where not used

graph&globalgraph db:
    -add foriegn key to both theory and problem ids, so that a "progression"
    list item cannot exist without its content
        -a graph "has_a file_id", but since this is technically two different
        types of files it won't work for associations (and neither belongs_to
        a graph anyway)...wait; will foreign key even work then?? prob
        not...prob can't have one attribute have foreign keys to different dbs
        depending on the tuple
        -so...don't do this? maybe fix db design or input somehow?
    -globalgraph doesn't have id at all
    -this association needs to be maintained at the application level (is THAT
    even possible without tuple ids?)
        -without the expensive act of constantly doing a find?
    -pretty sure these two DBs are just built incorrectly
        -make two of each, for a total of 4?
        -polymorphic assocation? it means that a single model may belong,
        one-to-one, to different models (YES this is it! a graph tuple may
        belong to a theory tuple or problem tuple!)
            -oops, doesn't work for globalgraph (man that db is just wrong)

problem dbs:
    -favor flexibility over performance, limited content
        -keep track of big SQL queries...they atm they don't involve the
        problems storage db (instead they involve DBs like score)

answers db
    -how to address answer modularity for a single answer?
        -fill in, multiple choice, etc
        -interface is obviously important here, but so is "fake" ans data

score db:
    -strict (simple, clean) relational DB with fast SQL queries because this db
    will scale with users
    -key would ideally be user_id, problem_id but rails convention says no
        -SQL queries for fetching user_id, ALL problem_id
            -likewise, ALL user_id, problem_id
    -created_at, updated_at attributes to see where user left off

metadata db:
    -curriculum/category/context are labeled incorrectly
    -consider moving difficulty to problem db

migrations:
    -remove build bug

controller filters:
    -editing profiles should be limited to owner of said profile:
    -curriculum should only be accessible by teachers/admins

user friendliness:
    -improve user index, label students/admins/teachers
    -friendly forwarding (chp 10)
        -does this include: back during results -> re-post -> error?

server-side input figures:
    -fix figures
        -either have a script re-write them at their source or figure out how
        to handle them all saying /FIG

input scripts:
    -write a script to fix curriculum/category/context, if useful in any way
    -also have curriculum properly inputted into problems and theories
    -increase robustness of graph reader script
        -multiple blank lines should be equivalent to 1

optimization:
    -"where" queries should all be moved into models and eagerly loaded sanely
    -redesign instances where calling tons of different DBs like user history
        -moving 'diff' out of metadata is an example of fixing this, but
        obivously better queries is going to be the most common improvement

documentation:
    -nothing for this but to literally go through rails with a fine tooth comb
        -obviously easier when working on tests, redesigns, and bugs
