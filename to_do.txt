deployment
    -Dreamhost
        -Passenger

basic User resource
    -RESTful Users controller actions
        -deny access for unintended user actions
    -fixtures or seeds?
    -student, admin, teacher, owner (parent)
        -in increasing order of likelihood to be removed
        -admin is 0
        -student is 1
        -teacher is 2
        -owner (parent) is 3
    -model
        -validity

QoL User resource
    -email validation registration
    -account recovery

security
    -user input is paramatarized
        -supposedly, rails view templates combat this
            -make sure they use whitelisting
    -check incomplete_security_checklist.txt in Dropbox
    -automatically log out people after a week
        -resets remember_tokens

DBs in general:
    -foreign keys
    -missing indicies (based off controller actions)
    -remove timestamps where not used

problem dbs:
    -favor flexibility over performance, limited content
        -keep track of big SQL queries...they atm they don't involve the
        problems storage db (instead they involve DBs like score)
    -seperate dbs for word-only, figure-enhanced problems?

answers db
    -how to address answer modularity for a single answer?
        -fill in, multiple choice, etc
        -interface is obviously important here, but so is "fake" ans data

score db:
    -strict (simple, clean) relational DB with fast SQL queries because this db
    will scale with users
    -key would ideally be user_id, problem_id but rails convention says no
        -SQL queries for fetching user_id, ALL problem_id
            -likewise, ALL user_id, problem_id
    -created_at, updated_at attributes to see where user left off

solutions db:
    -favor flexibility over performance, limited content
        -can't forsee any pitfalls here...solutions shouldn't be involved in
        any big queries at any point
    -input script requires? ability to include multiple solutions

hints db:
    -input script requires ability to include multiple hints

unlocked_theories db:
    -user_id, a string with filenames

db relationships:
    -after models setup for v1, add relationships (make sure migrations for
    them are run, check results for design errors)
        -might be some opportunity to remove/replace models here but unlikely

migrations:
    -make sure that the code, (create and drop in particular) is setup properly
    so that the migrations aren't bugged depending on ordering/status
        -i mean make sure the code does everything properly so that rails
        doesn't get confused and lose sync between actual DBs, schema, and
        migrations

do not forget:
    -editing profiles should be limited to owner of said profile:
    view/controller/route should reflect this...use cookies to identify and
    require login

user friendliness:
    -improve user index, label students/admins/teachers
    -add personal accounts as part of the seed
    -friendly forwarding (chp 10)
    -right now "current_user" auto-logins the user through cookies, but
    isn't it still possible that a user appears "logged out" at a page when
    they have cookies enabled? aka: close browser, enter bookmarked page
    without "current_user"
        -no, because header and footer appear on all pages, REGRESSION TEST
            -header/footer appear everywhere AND (another test) cookied user
            always appears logged in on ALL pages

documentation:
    -navigation and restrictions
        -only admin can see delete links, only admin can delete action
            -anything else in this vein
    -temp/perm login
    -user model, actions, and views
    -RESTful architecture
    -different account privilages
    -header/footer, and site in general, changing based on login

batch input:
    -fix figures, hardcoded addresses in input html must be wrong
    -multiple solutions and hints
        -check Robert's solution, if it isn't computationally expensive copy
        -otherwise, write a script to change :bsol: to :bsol12: (which means
        1 of 2) and same for hints so end up with :bhint23: (2 of 3)
            -besides me "being lazy" with scripts the arguement here is that
            the scripts digesting the data do less work because they don't have
            to figure the format of the content each time (WORTH!)
