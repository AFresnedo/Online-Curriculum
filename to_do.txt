data validations:
    -not only input (is answer missing?)
    -remember that bug with "nil" category saves in unlocked_theory because the
    setter wasn't being called by marker model? that stuff too
    -integration tests are tightly connected with this, start making those at
    the same time

context: theoryfile bug
    -unable to find file from Globalgraph tuple
        -obvious solution is to add file id to globaltuple but no
        -better solution is to add category, context attributes to Theory
            -remove filename att? might be bad for interfaces
            -context for globalgraph theory files is "theoryfile", so if
            a theoryfile doesn't have a context: write that
deployment
    -Dreamhost
        -Passenger

basic User resource
    -RESTful Users controller actions
        -deny access for unintended user actions
    -fixtures or seeds?
    -student, admin, teacher, owner (parent)
        -in increasing order of likelihood to be removed
        -admin is 0
        -student is 1
        -teacher is 2
        -owner (parent) is 3
    -model
        -validity

QoL User resource
    -email validation registration
    -account recovery

security
    -user input is paramatarized
        -supposedly, rails view templates combat this
            -make sure they use whitelisting
    -check incomplete_security_checklist.txt in Dropbox
    -automatically log out people after a week
        -resets remember_tokens

DBs in general:
    -foreign keys
        -foreign keys are actually pretty new to rails (and not supported by
        all DB types)...they are in addition to references (not references
        themselves) the standard/old rails convention is for the application
        (models) to enforce integrity not the db itself; add them later if
        wanted
            -okay, regardless, with rails 5: using references DOES add the
            foriegn keys; they just aren't showing up on the schema
                -a schema is NOT a db...look it up with db viewer if you need
                to
                    -issue here is your viewer is sqlite and it seems to ignore
                    foreign keys (there's an option in it with foriegn keys
                    disabled, do i enable it?)
    -missing indicies (based off controller actions)
    -remove timestamps where not used

graph&globalgraph db:
    -add foriegn key to both theory and problem ids, so that a "progression"
    list item cannot exist without its content
        -a graph "has_a file_id", but since this is technically two different
        types of files it won't work for associations (and neither belongs_to
        a graph anyway)...wait; will foreign key even work then?? prob
        not...prob can't have one attribute have foreign keys to different dbs
        depending on the tuple
        -so...don't do this? maybe fix db design or input somehow?
    -globalgraph doesn't have id at all
    -this association needs to be maintained at the application level (is THAT
    even possible without tuple ids?)
        -without the expensive act of constantly doing a find?
    -pretty sure these two DBs are just built incorrectly
        -make two of each, for a total of 4?
        -polymorphic assocation? it means that a single model may belong,
        one-to-one, to different models (YES this is it! a graph tuple may
        belong to a theory tuple or problem tuple!)
            -oops, doesn't work for globalgraph (man that db is just wrong)

problem dbs:
    -favor flexibility over performance, limited content
        -keep track of big SQL queries...they atm they don't involve the
        problems storage db (instead they involve DBs like score)
    -seperate dbs for word-only, figure-enhanced problems?

answers db
    -how to address answer modularity for a single answer?
        -fill in, multiple choice, etc
        -interface is obviously important here, but so is "fake" ans data

score db:
    -strict (simple, clean) relational DB with fast SQL queries because this db
    will scale with users
    -key would ideally be user_id, problem_id but rails convention says no
        -SQL queries for fetching user_id, ALL problem_id
            -likewise, ALL user_id, problem_id
    -created_at, updated_at attributes to see where user left off

solutions db:
    -favor flexibility over performance, limited content
        -can't forsee any pitfalls here...solutions shouldn't be involved in
        any big queries at any point

metadata db:
    -fix (don't destroy, difficulty and such)

migrations:
    -make sure that the code, (create and drop in particular) is setup properly
    so that the migrations aren't bugged depending on ordering/status
        -i mean make sure the code does everything properly so that rails
        doesn't get confused and lose sync between actual DBs, schema, and
        migrations

do not forget:
    -editing profiles should be limited to owner of said profile:
    view/controller/route should reflect this...use cookies to identify and
    require login

user friendliness:
    -improve user index, label students/admins/teachers
    -add personal accounts as part of the seed
    -friendly forwarding (chp 10)
    -right now "current_user" auto-logins the user through cookies, but
    isn't it still possible that a user appears "logged out" at a page when
    they have cookies enabled? aka: close browser, enter bookmarked page
    without "current_user"
        -no, because header and footer appear on all pages, REGRESSION TEST
            -header/footer appear everywhere AND (another test) cookied user
            always appears logged in on ALL pages

documentation:
    -navigation and restrictions
        -only admin can see delete links, only admin can delete action
            -anything else in this vein
    -temp/perm login
    -user model, actions, and views
    -RESTful architecture
    -different account privilages
    -header/footer, and site in general, changing based on login

batch input:
    -fix figures, hardcoded addresses in input html must be wrong
    -see input scripts file(s) in dropbox

input scripts:
    -write a script to fix curriculum/category/context, if useful in any way

optimization:
    -determine if using scores to find ip problems or if having a seperate
    table for a list of a user's IP problems is better
